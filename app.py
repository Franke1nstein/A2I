import streamlit as st
import tensorflow as tf
import numpy as np
import os
from PIL import Image
import numpy as np
import time
from model_utils import model_prediction

selected_model_path = None

#Sidebar
st.sidebar.title("Page")
app_mode = st.sidebar.selectbox("S√©lectionner une page",["Accueil","√Ä propos","Reconnaissance des maladies"])

#Main Page
if(app_mode=="Accueil"):
    st.header("SYST√àME DE RECONNAISSANCE DES MALADIES DES PLANTES")
    image_path = "home_page.jpeg"
    st.image(image_path,use_container_width=True)
    st.markdown("""
   

    ### √Ä propos 
    Apprenez-en plus sur le projet, notre √©quipe et nos objectifs sur la page **√Ä propos**.
    """)

#About Project
elif(app_mode=="√Ä propos"):
    st.header("√Ä propos")
    st.markdown("""
                 Bienvenue dans le Syst√®me de Reconnaissance des Maladies des Plantes ! üåøüîç

    Notre mission est d'aider √† identifier les maladies des plantes par les symptomes au niveau des feuilles. TFournisser une image d'une plante et notre syst√®me l'analysera pour d√©tecter tout signe de maladie. Ensemble, prot√©geons nos cultures et assurons une r√©colte plus saine !

    ### Comment √ßa marche ?
    1. **T√©l√©charger l'image :** Allez √† la page **Reconnaissance des maladies** et t√©l√©chargez une image d'une plante pr√©sentant des sympt√¥mes de maladies.
    2. **Chosir le mod√®le :** Parmi les Choix disponibles ou laisser par d√©fauts.
    3. **Analyse :** Notre syst√®me traitera l'image √† l'aide d'algorithmes avanc√©s pour identifier les maladies potentielles.
    4. **R√©sultats :** Consultez les r√©sultats et les recommandations pour les actions √† entreprendre.

    ### Avantages

    - **Facile √† utiliser :** Interface simple et intuitive pour une exp√©rience utilisateur fluide.
    - **Rapide :** Recevez les r√©sultats en quelques secondes, ce qui permet une prise de d√©cision rapide.
    - **Adaptif :** Differents Mod√®le d'Intelligence Artificielle disponibles pour la pr√©diction des  maladies.

    ### Commencez
    Cliquez sur la page **Reconnaissance des maladies** dans la barre lat√©rale pour t√©l√©charger une image et d√©couvrir la puissance de notre Syst√®me de Reconnaissance des Maladies des Plantes !
              
    #### √Ä propos du jeu de donn√©es(DATASET)
    Ce jeu de donn√©es a √©t√© recr√©√© √† l'aide d'une augmentation hors ligne √† partir du jeu de donn√©es original.
    Ce jeu de donn√©es contient environ 87 000 images de feuilles de cultures saines et malades, class√©es en 38 classes diff√©rentes. L'ensemble du jeu de donn√©es est divis√© en un rapport 80/20 pour les ensembles d'apprentissage et de validation, en pr√©servant la structure du r√©pertoire.
    Un nouveau r√©pertoire contenant 33 images de test a √©t√© cr√©√© ult√©rieurement √† des fins de pr√©diction.
    
    """)


#Prediction Page

elif(app_mode=="Reconnaissance des maladies"):
    st.header("Reconnaissance des maladies")
    st.spinner(text="En Cours..")
    
    # --- AJOUT DU SELECTBOX POUR LE CHOIX DU MOD√àLE ---
    st.sidebar.header("Mod√®le de Pr√©diction")
    model_options = [] # Liste pour stocker les noms des mod√®les
    model_dir = "./Model/" # R√©pertoire o√π sont stock√©s vos mod√®les
    
    # R√©cup√©rer la liste des fichiers .h5 dans le r√©pertoire des mod√®les
    if os.path.exists(model_dir):
        model_files = [f for f in os.listdir(model_dir) if f.endswith(".h5")]
        if model_files:
            model_options = model_files
        else:
            st.sidebar.warning("Aucun fichier de mod√®le (.h5) trouv√© dans le r√©pertoire 'Model/'.")
    else:
        st.sidebar.error(f"R√©pertoire de mod√®les '{model_dir}' non trouv√©.")
    
    # Selectbox pour choisir le mod√®le
    selected_model_file = st.sidebar.selectbox("S√©lectionner le mod√®le", model_options)
    # --- ASSIGN VALUE TO THE TOP-LEVEL selected_model_path VARIABLE ---
    selected_model_path = os.path.join(model_dir, selected_model_file)

    test_image = st.file_uploader("Choisissez une image :", type=["png", "jpg", "jpeg"])
    if(st.button("Afficher l'image")):
        if test_image is not None:
            st.image(test_image,width=4,use_container_width=True)
        else:
            st.warning("Veuillez t√©l√©charger une image avant de cliquer sur 'Afficher l'image'.")


    #Predict button
    if st.button("Predire"):
        if test_image is not None:

            with st.spinner(text="Analyse en Cours..."):
                # --- PRE-TRAITEMENT DE L'IMAGE (REDIMENSIONNEMENT √† 256x256) ---
                image = Image.open(test_image)
                resized_image = image.resize((256, 256)) # Redimensionner √† 256x256
                img_array = np.array(resized_image)
                img_array = np.expand_dims(img_array, axis=0)
                # --- FIN DU PRE-TRAITEMENT ---

                predicted_class_index, predictions_array = model_prediction(test_image, selected_model_path)

            # Lecture des √©tiquettes (doit √™tre en dehors du spinner pour afficher le r√©sultat apr√®s la pr√©diction)
            class_name = ['Apple___Apple_scab', 'Apple___Black_rot', 'Apple___Cedar_apple_rust', 'Apple___healthy',
                            'Blueberry___healthy', 'Cherry_(including_sour)___Powdery_mildew',
                            'Cherry_(including_sour)___healthy', 'Corn_(maize)___Cercospora_leaf_spot Gray_leaf_spot',
                            'Corn_(maize)___Common_rust_', 'Corn_(maize)___Northern_Leaf_Blight', 'Corn_(maize)___healthy',
                            'Grape___Black_rot', 'Grape___Esca_(Black_Measles)', 'Grape___Leaf_blight_(Isariopsis_Leaf_Spot)',
                            'Grape___healthy', 'Orange___Haunglongbing_(Citrus_greening)', 'Peach___Bacterial_spot',
                            'Peach___healthy', 'Pepper,_bell___Bacterial_spot', 'Pepper,_bell___healthy',
                            'Potato___Early_blight', 'Potato___Late_blight', 'Potato___healthy',
                            'Raspberry___healthy', 'Soybean___healthy', 'Squash___Powdery_mildew',
                            'Strawberry___Leaf_scorch', 'Strawberry___healthy', 'Tomato___Bacterial_spot',
                            'Tomato___Early_blight', 'Tomato___Late_blight', 'Tomato___Leaf_Mold',
                            'Tomato___Septoria_leaf_spot', 'Tomato___Spider_mites Two-spotted_spider_mite',
                            'Tomato___Target_Spot', 'Tomato___Tomato_Yellow_Leaf_Curl_Virus', 'Tomato___Tomato_mosaic_virus',
                            'Tomato___healthy']
            try:    
              predicted_class_name = class_name[predicted_class_index]
            
              # --- Obtenir le POURCENTAGE de confiance ---
              max_probability = np.max(predictions_array) # Trouver la probabilit√© maximale
              percentage_confidence = max_probability * 100 # Convertir en pourcentage
              percentage_confidence_formatted = "{:.2f}".format(percentage_confidence)
            
              st.success(f"Le mod√®le pr√©dit qu'il s'agit de : **{predicted_class_name}** (Confiance : **{percentage_confidence_formatted}%**)")
            except IndexError: # Capture de l'erreur IndexError
                st.error("Erreur lors de la pr√©diction : Index de classe invalide d√©tect√©. Veuillez r√©essayer ou v√©rifier l'image.")
                st.warning("Il pourrait y avoir un probl√®me avec le mod√®le ou les √©tiquettes de classes. V√©rifiez que le mod√®le est correctement charg√© et que la liste des noms de classes correspond aux pr√©dictions du mod√®le.")
        else:
            st.warning("Veuillez t√©l√©charger une image avant de lancer la pr√©diction.") # Message d'avertissement si aucune image n'est t√©l√©charg√©e